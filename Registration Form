public class RegistrationForm extends JFrame {
    private JTextField txtName, txtMobile, txtDOB, txtAddress;
    private JRadioButton rbMale, rbFemale;
    private JButton btnSubmit, btnReset;
    private JTable table;
    private DefaultTableModel model;

    private Connection connect() {
        String url = "jdbc:sqlite:registration.db";
        Connection conn = null;
        try {
            conn = DriverManager.getConnection(url);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
        return conn;
    }

    public RegistrationForm() {
        setTitle("Registration Form");
        setSize(560, 450 );
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(8, 4));

        panel.add(new JLabel("Name:"));
        txtName = new JTextField();
        panel.add(txtName);

        panel.add(new JLabel("Mobile:"));
        txtMobile = new JTextField();
        panel.add(txtMobile);

        panel.add(new JLabel("Gender:"));
        JPanel genderPanel = new JPanel();
        rbMale = new JRadioButton("Male");
        rbFemale = new JRadioButton("Female");
        ButtonGroup bg = new ButtonGroup();
        bg.add(rbMale);
        bg.add(rbFemale);
        genderPanel.add(rbMale);
        genderPanel.add(rbFemale);
        panel.add(genderPanel);

        panel.add(new JLabel("DOB:"));
        txtDOB = new JTextField();
        panel.add(txtDOB);

        panel.add(new JLabel("Address:"));
        txtAddress = new JTextField();
        panel.add(txtAddress);

        btnSubmit = new JButton("Submit");
        btnReset = new JButton("Reset");

        panel.add(btnSubmit);
        panel.add(btnReset);

        add(panel, BorderLayout.NORTH);

        table = new JTable();
        model = new DefaultTableModel(new String[]{"ID", "Name", "Mobile", "Gender", "DOB", "Address"}, 0);
        table.setModel(model);
        add(new JScrollPane(table), BorderLayout.CENTER);

        btnSubmit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                insertData();
                loadData();
            }
        });

        btnReset.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                resetForm();
            }
        });

        initializeDatabase();
        loadData();
    }

    private void initializeDatabase() {
        String sql = "CREATE TABLE IF NOT EXISTS registration (" +
                     "id INTEGER PRIMARY KEY AUTOINCREMENT," +
                     "name TEXT NOT NULL," +
                     "mobile TEXT NOT NULL," +
                     "gender TEXT NOT NULL," +
                     "dob TEXT NOT NULL," +
                     "address TEXT NOT NULL" +
                     ");";

        try (Connection conn = connect();
             Statement stmt = conn.createStatement()) {
            stmt.execute(sql);
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void insertData() {
        String name = txtName.getText();
        String mobile = txtMobile.getText();
        String gender = rbMale.isSelected() ? "Male" : "Female";
        String dob = txtDOB.getText();
        String address = txtAddress.getText();

        String sql = "INSERT INTO registration(name, mobile, gender, dob, address) VALUES(?,?,?,?,?)";

        try (Connection conn = connect();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {
            pstmt.setString(1, name);
            pstmt.setString(2, mobile);
            pstmt.setString(3, gender);
            pstmt.setString(4, dob);
            pstmt.setString(5, address);
            pstmt.executeUpdate();
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void loadData() {
        String sql = "SELECT * FROM registration";

        try (Connection conn = connect();
             Statement stmt = conn.createStatement();
             ResultSet rs = stmt.executeQuery(sql)) {

            model.setRowCount(0);

            while (rs.next()) {
                model.addRow(new Object[]{
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("mobile"),
                        rs.getString("gender"),
                        rs.getString("dob"),
                        rs.getString("address")
                });
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    private void resetForm() {
        txtName.setText("");
        txtMobile.setText("");
        rbMale.setSelected(false);
        rbFemale.setSelected(false);
        txtDOB.setText("");
        txtAddress.setText("");
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new RegistrationForm().setVisible(true);
            }
        });
    }
}
